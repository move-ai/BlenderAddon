import bpy
import os
import requests


class CodeNotValidError(Exception):
    """
    Custom Exception class to handle invalid codes.
    """


class FileManager:
    """
    FileManager class contains utility methods for file-related operations.
    """
    @staticmethod
    def download_file(file_url: str) -> bytes:
        """
        Download the file from the given URL.

        Parameters:
            file_url (str): The URL of the file to be downloaded.

        Returns:
            bytes: File content if successful.

        Raises:
            RuntimeError: If the file download fails.
        """
        file_response = requests.get(url=file_url, timeout=20)
        if file_response.status_code == 200:
            return file_response.content
        else:
            raise RuntimeError(
                f'Failed to download file: {file_response.status_code}')

    @staticmethod
    def write_to_temp_file(file_content: bytes, tmp_dir: str) -> str:
        """
        Write the file content to a temporary location.

        Parameters:
            file_content (bytes): The content of the file.
            tmp_dir (str): The directory to save the file.

        Returns:
            str: Path to the saved temporary file.
        """
        tmp_file_path = os.path.join(tmp_dir, 'temp_fbx.fbx')
        with open(tmp_file_path, 'w+b') as file_stream:
            file_stream.write(file_content)
            return tmp_file_path

    @staticmethod
    def import_file(tmp_file_path: str):
        """
        Import the file into Blender using the FBX import_scene operator.

        Parameters:
            tmp_file_path (str): The path of the file to be imported.
        """
        bpy.ops.import_scene.fbx(
            filepath=tmp_file_path,
            axis_forward="-Y",
            axis_up="Z",
            use_manual_orientation=True,
        )


class APIHandler:
    """
    APIHandler class contains methods to interact with the Move AI API.
    """
    @staticmethod
    def fetch_file_data(code: str) -> requests.Response:
        """
        Fetch the file metadata from Move AI API using the given code.

        Parameters:
            code (str): One-time code generated by the Move AI application.

        Returns:
            requests.Response: Response object containing file metadata.

        Raises:
            CodeNotValidError: If the code is invalid or has expired.
        """
        try:
            response = requests.get(
                url="https://api.move.ai/ugc/file/download",
                params={"code": code},
                timeout=20,
            )
            response.raise_for_status()
            return response
        except requests.RequestException:
            raise CodeNotValidError(
                f"Code {code} not valid. It may have expired or have been used already.")
